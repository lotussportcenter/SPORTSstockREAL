<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sports Stock Market</title>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <style>
        body { font-family: Arial, sans-serif; background: linear-gradient(135deg, #1c3b57, #324a68); color: white; text-align: center; padding: 20px; }
        table { width: 85%; margin: 20px auto; border-collapse: collapse; background: #2e3b4e; color: white; }
        th, td { padding: 15px; border-bottom: 1px solid #ddd; text-align: center; }
        th { background: #1f4b75; color: white; }
        .up { color: #4caf50; font-weight: bold; }
        .down { color: #f44336; font-weight: bold; }
    </style>
</head>
<body>
    <h1>ðŸ“ˆ Sports Stock Market (Real-time)</h1>
    <table>
        <thead>
            <tr>
                <th>Sport</th>
                <th>League</th>
                <th>Team/Club</th>
                <th>Price (â‚¬)</th>
                <th>Change</th>
            </tr>
        </thead>
        <tbody id="stockTable"></tbody>
    </table>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            if (typeof firebase === 'undefined') {
                console.error("Firebase is not loaded correctly.");
                return;
            }

            const firebaseConfig = {
                apiKey: "YOUR_FIREBASE_API_KEY", // Replace with your Firebase API key
                authDomain: "YOUR_AUTH_DOMAIN",
                databaseURL: "YOUR_DATABASE_URL",
                projectId: "YOUR_PROJECT_ID",
                storageBucket: "YOUR_STORAGE_BUCKET",
                messagingSenderId: "YOUR_SENDER_ID",
                appId: "YOUR_APP_ID",
                measurementId: "YOUR_MEASUREMENT_ID"
            };
            firebase.initializeApp(firebaseConfig);
            const db = firebase.database();
            let teamsRef = db.ref("teams");

            function renderTeams(snapshot) {
                const tableBody = document.getElementById("stockTable");
                tableBody.innerHTML = "";
                let teams = snapshot.val();
                if (!teams) {
                    console.error("No teams found in Firebase!");
                    return;
                }
                Object.values(teams).forEach(team => {
                    const row = document.createElement("tr");
                    let changeClass = team.change.includes('ðŸ“ˆ') ? "up" : "down";
                    row.innerHTML = `
                        <td>${team.sport}</td>
                        <td>${team.league}</td>
                        <td>${team.name}</td>
                        <td class="price">â‚¬${team.price}</td>
                        <td class="change ${changeClass}">${team.change}</td>
                    `;
                    tableBody.appendChild(row);
                });
            }

            teamsRef.on("value", renderTeams);

            async function updatePrices() {
                const apiKey = "YOUR_API_SPORTS_KEY"; // Replace with your API-Sports key
                const teams = ["barcelona", "realmadrid", "manutd"];
                const url = `https://v3.football.api-sports.io/teams`;

                try {
                    const headers = { "x-rapidapi-key": apiKey, "x-rapidapi-host": "v3.football.api-sports.io" };
                    for (const team of teams) {
                        const response = await fetch(`${url}?team=${team}`, { headers });
                        const data = await response.json();
                        const newPrice = data.price || 100; // Replace with the correct field
                        const change = (Math.random() * (0.04 - 0.02) - 0.02).toFixed(2);
                        const priceChange = parseFloat(change).toFixed(2);
                        db.ref(`teams/${team}`).update({
                            price: newPrice,
                            change: priceChange > 0 ? `ðŸ“ˆ +${priceChange}` : `ðŸ“‰ ${priceChange}`
                        });
                    }
                } catch (error) {
                    console.error("Error fetching API data:", error);
                }
            }

            setInterval(updatePrices, 900000); // Update prices every 15 minutes
        });
    </script>
</body>
</html>
